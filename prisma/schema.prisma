// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For email/password auth
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User preferences
  location           String?
  preferredRemote    Boolean   @default(false)
  preferredSalaryMin Int?
  preferredSalaryMax Int?
  skills             String?   // JSON string of skills array
  experienceLevel    String?
  jobAlerts          Boolean   @default(true)
  emailNotifications Boolean   @default(true)

  // Relations
  accounts    Account[]
  sessions    Session[]
  savedJobs   SavedJob[]
  applications JobApplication[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// UpFetch specific models
model SavedJob {
  id      String   @id @default(cuid())
  userId  String
  jobId   String   // Job ID from the API
  jobData String   // JSON string of job data
  notes   String?
  savedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

model JobApplication {
  id             String            @id @default(cuid())
  userId         String
  jobId          String            // Job ID from the API
  jobData        String            // JSON string of job data
  status         ApplicationStatus @default(APPLIED)
  appliedAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  applicationUrl String?
  notes          String?
  followUpDate   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  APPLIED
  VIEWED
  INTERVIEWING
  REJECTED
  HIRED
}

model UserSearchHistory {
  id        String   @id @default(cuid())
  userId    String
  query     String
  location  String?
  searchedAt DateTime @default(now())

  @@index([userId, searchedAt])
}
